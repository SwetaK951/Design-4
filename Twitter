class Twitter {

    HashMap<Integer, HashSet<Integer>> followers;
    HashMap<Integer, List<Tweet>> tweets;
    int timestamp = 0;
    int limit = 10;

    /** Initialize your data structure here. */
    public Twitter() {
        this.followers = new HashMap<>();
        this.tweets = new HashMap<>();
    }
    
    /** Compose a new tweet. */
    public void postTweet(int userId, int tweetId) {
        List<Tweet> tweet = tweets.getOrDefault(userId,new ArrayList<>());
        tweet.add(new Tweet(tweetId,timestamp++));
        tweets.put(userId,tweet);
    }
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    public List<Integer> getNewsFeed(int userId) {
        PriorityQueue<Tweet> pq = new PriorityQueue<>((a,b) -> a.timestamp - b.timestamp);
        List<Integer> result = new ArrayList<>();
        HashSet<Integer> followees = followers.get(userId);
        
        if(followees == null){
            followees = new HashSet<>();
        }
        followees.add(userId);
        for(Integer id : followees){
            if(!tweets.containsKey(id))
                continue;
            for(Tweet t : tweets.get(id)){
                if(pq.size() < limit){
                    pq.add(t);
                }
                else{
                    if(t.timestamp > pq.peek().timestamp){
                        pq.poll();
                        pq.add(t);
                    }
                }
            }
        }  
        while(!pq.isEmpty()){
            Tweet t = pq.poll();
            result.add(0,t.tweetId);
        }
        return result;
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    public void follow(int followerId, int followeeId) {
        HashSet<Integer> follower = followers.getOrDefault(followerId, new HashSet<>());
        follower.add(followeeId);
        followers.put(followerId,follower);
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    public void unfollow(int followerId, int followeeId) {
        HashSet<Integer> follower = followers.getOrDefault(followerId, new HashSet<>());
        if(follower.contains(followeeId))
            follower.remove(followeeId);
    }
    
    class Tweet{
        private int tweetId;
        private int timestamp;
        
        public Tweet(int tweetId, int timestamp){
            this.tweetId = tweetId;
            this.timestamp = timestamp;
        }
    }
}
// Time complexity is O(n)
// Space Complexity O(nlogk) where k is 10
// Tested in leetcode

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */